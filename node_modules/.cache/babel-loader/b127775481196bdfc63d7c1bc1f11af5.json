{"ast":null,"code":"'use strict';\n\nvar PromiseInspection = require('./PromiseInspection').PromiseInspection;\n\nfunction defer() {\n  var resolve = null;\n  var reject = null;\n  var promise = new Promise(function (resolver, rejecter) {\n    resolve = resolver;\n    reject = rejecter;\n  });\n  return {\n    promise: promise,\n    resolve: resolve,\n    reject: reject\n  };\n}\n\nfunction now() {\n  return Date.now();\n}\n\nfunction duration(t1, t2) {\n  return Math.abs(t2 - t1);\n}\n\nfunction checkOptionalTime(time) {\n  if (typeof time === 'undefined') {\n    return true;\n  } else {\n    return checkRequiredTime(time);\n  }\n}\n\nfunction checkRequiredTime(time) {\n  return typeof time === 'number' && time === Math.round(time) && time > 0;\n}\n\nfunction delay(millis) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, millis);\n  });\n}\n\nfunction reflect(promise) {\n  return promise.then(function (value) {\n    return new PromiseInspection({\n      value: value\n    });\n  }).catch(function (error) {\n    return new PromiseInspection({\n      error: error\n    });\n  });\n}\n\nfunction tryPromise(cb) {\n  try {\n    var result = cb();\n    return Promise.resolve(result);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nmodule.exports = {\n  now: now,\n  defer: defer,\n  delay: delay,\n  reflect: reflect,\n  duration: duration,\n  tryPromise: tryPromise,\n  checkOptionalTime: checkOptionalTime,\n  checkRequiredTime: checkRequiredTime\n};","map":null,"metadata":{},"sourceType":"script"}